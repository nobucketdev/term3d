name: Quick Test Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Temporarily move test files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -d "tests" ]; then
            mv tests/* .
          fi

      - name: Temporarily move test files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path "tests" -PathType Container) {
            Move-Item -Path "tests\*" -Destination "."
          }

      - name: Run all tests with timeout (Linux/macOS)
        if: runner.os != 'Windows'
        id: run_tests_unix
        run: |
          echo "" > raw_output.txt
          error_found=0
          for file in *.py; do
            echo "Running $file..."
            if ! timeout 10s python3 "$file" >> raw_output.txt 2>&1; then
              if [ $? -eq 124 ]; then
                echo "[TIMEOUT] $file" >> raw_output.txt
              else
                echo "[ERROR] $file" >> raw_output.txt
              fi
              error_found=1
            else
              echo "[OK] $file" >> raw_output.txt
            fi
          done
          echo "error_found=$error_found" >> $GITHUB_ENV

      - name: Run all tests with timeout (Windows)
        if: runner.os == 'Windows'
        id: run_tests_windows
        shell: pwsh
        run: |
          Set-Content -Path "raw_output.txt" -Value ""
          $errorFound = 0
          
          Get-ChildItem -Path *.py | ForEach-Object {
            $file = $_.Name
            Write-Host "Running $file..."
            
            $process = Start-Process -FilePath "python" -ArgumentList $file -NoNewWindow -PassThru -Wait -RedirectStandardOutput "raw_output.txt" -RedirectStandardError "raw_output.txt"
            
            if ($process.ExitCode -ne 0) {
              if ($process.ExitCode -eq 124) {
                Add-Content -Path "raw_output.txt" -Value "[TIMEOUT] $file"
              } else {
                Add-Content -Path "raw_output.txt" -Value "[ERROR] $file"
              }
              $errorFound = 1
            } else {
              Add-Content -Path "raw_output.txt" -Value "[OK] $file"
            }
          }
          Write-Output "error_found=$errorFound" >> $env:GITHUB_ENV

      - name: Move files back (cleanup - Linux/macOS)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -d "tests" ]; then
            mkdir -p tests
            for file in *.py; do
              mv "$file" tests/
            done
          fi

      - name: Move files back (cleanup - Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path "tests" -PathType Container) {
            Get-ChildItem -Path *.py | ForEach-Object {
              Move-Item -Path $_.FullName -Destination "tests\"
            }
          }

      - name: Upload full logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-test-logs-${{ matrix.os }}
          path: raw_output.txt

      - name: Post comment result
        if: always() && matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issue_number = context.payload.pull_request.number;
            const logs = fs.readFileSync('raw_output.txt', 'utf8');
            const lines = logs.split('\n').filter(line => line.trim() !== '');

            let successCount = 0;
            let totalCount = 0;

            lines.forEach(line => {
              if (line.startsWith('[OK]')) {
                successCount++;
                totalCount++;
              } else if (line.startsWith('[ERROR]') || line.startsWith('[TIMEOUT]')) {
                totalCount++;
              }
            });

            const timestamp = new Date().toLocaleString();
            const summary = `${timestamp}: ${successCount}/${totalCount}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: summary
            });
