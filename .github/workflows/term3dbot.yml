name: Quick Test Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  run-tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Temporarily move test files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ -d "tests" ]; then
            mv tests/* .
          fi

      - name: Temporarily move test files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path "tests" -PathType Container) {
            Move-Item -Path "tests\*" -Destination "."
          }

      # Separate step for Linux/macOS tests
      - name: Run all tests with timeout (Linux/macOS)
        if: runner.os != 'Windows'
        id: run_tests_unix
        run: |
          echo "" > raw_output.txt
          error_found=0
          for file in *.py; do
            echo "Running $file..."
            if ! timeout 10s python3 "$file" >> raw_output.txt 2>&1; then
              if [ $? -eq 124 ]; then
                echo "[TIMEOUT] $file" >> raw_output.txt
              else
                echo "[ERROR] $file" >> raw_output.txt
              fi
              error_found=1
            else
              echo "[OK] $file" >> raw_output.txt
            fi
          done
          echo "error_found=$error_found" >> $GITHUB_ENV

      # Separate step for Windows tests
      - name: Run all tests with timeout (Windows)
        if: runner.os == 'Windows'
        id: run_tests_windows
        run: |
          @echo off
          echo. > raw_output.txt
          set "error_found=0"
          for %%f in (*.py) do (
            echo Running %%f...
            timeout 10 python "%%f" >> raw_output.txt 2>&1
            if !ERRORLEVEL! EQU 0 (
              echo [OK] %%f >> raw_output.txt
            ) else if !ERRORLEVEL! EQU 124 (
              echo [TIMEOUT] %%f >> raw_output.txt
            ) else (
              echo [ERROR] %%f >> raw_output.txt
            )
            if !ERRORLEVEL! NEQ 0 (
              set "error_found=1"
            )
          )
          echo error_found=%error_found% >> %GITHUB_ENV%

      - name: Move files back (cleanup - Linux/macOS)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -d "tests" ]; then
            mkdir -p tests
            for file in *.py; do
              mv "$file" tests/
            done
          fi

      - name: Move files back (cleanup - Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path "tests" -PathType Container) {
            Get-ChildItem -Path *.py | ForEach-Object {
              Move-Item -Path $_.FullName -Destination "tests\"
            }
          }

      - name: Upload full logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-test-logs-${{ matrix.os }}
          path: raw_output.txt

      - name: Post comment result
        # Only post the comment from one job to avoid duplicate comments.
        if: always() && matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issue_number = context.payload.pull_request.number;
            const logs = fs.readFileSync('raw_output.txt', 'utf8');
            let summary = '### ✅ Test Results:\n';

            logs.split('\n').forEach(line => {
              if (line.startsWith('[OK]')) {
                const file = line.replace('[OK] ', '');
                summary += `✅ ${file}\n`;
              } else if (line.startsWith('[ERROR]')) {
                const file = line.replace('[ERROR] ', '');
                summary += `❌ ${file}\n`;
              } else if (line.startsWith('[TIMEOUT]')) {
                const file = line.replace('[TIMEOUT] ', '');
                summary += `⏳ ${file}\n`;
              }
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: summary
            });
